h1. Formtastic Sneaky Preview

Formtastic is a Rails FormBuilder DSL (with some other goodies) to make it far easier to create beautiful, semantically rich, syntactically awesome, readily stylable and wonderfully accessible HTML forms in your Rails applications.

h2. The Story

Hacked together forms were easy, but awesome forms with decent semantics, rich mark-up and plenty of CSS hooks were incredibly painful.  I was discouraged from doing things properly because it was too much mark-up and code to write.  One day, I finally had enough, so I opened up my text editor, and wrote a DSL for how I'd like to author forms:

<pre>
  <% semantic_form_for @article do |form| %>

    <% form.inputs :name => "Basic" do %>
      <%= form.input :title %>
      <%= form.input :body %>
      <%= form.input :section_id %>
      <%= form.input :publication_state_id, :as => :radio %>
      <%= form.input :author_id, :as => :select %>
      <%= form.input :allow_comments, :label => "Allow commenting on this article" %>
    <% end %>

    <% form.inputs :name => "Advanced" do %>
      <%= form.input :keywords, :required => false, :hint => "Example: ruby, rails, forms" %>
      <%= form.input :extract, :required => false %>
      <%= form.input :description, :required => false %>
      <%= form.input :url_title, :required => false %>
    <% end %>

    <% form.buttons do %>
      <%= form.commit_button %>
    <% end %>

  <% end %>
</pre>

I also wrote the accompanying HTML output I expected, favoring something very similar to the fieldsets, lists and other semantic elements Aaron Gustafson presented in "Learning to Love Forms":http://www.slideshare.net/AaronGustafson/learning-to-love-forms-web-directions-south-07, hacking together enough Ruby to prove it could be done.


h2. Why?

* web apps = lots of forms
* forms are so friggin' boring to code
* semantically rich & accessible forms really are possible
* the "V" is way behind the "M" and "C" in Rails' MVC â€“ it's the ugly sibling
* best practices and common patterns have to start somewhere
* i need a challenge


h2. Opinions

* it should be easier to do things the right way than the wrong way
* sometimes _more mark-up_ is better
* elements and attribute hooks are _gold_ for stylesheet authors
* make the common things we do easy, yet still ensure uncommon things are still possible


h2. The Available Inputs

* :select (a select menu for belongs_to associations) - default for columns ending in '_id'
* :radio (a set of radio inputs for belongs_to associations) - alternative for columns ending in '_id'
* :password (a password input) - default for :string column types with 'password' in the method name
* :text (a textarea) - default for :text column types
* :date (a date select) - default for :date column types
* :datetime (a date and time select) - default for :datetime and :timestamp column types
* :time (a time select) - default for :time column types
* :boolean (a checkbox) - default for :boolean column types
* :boolean_select (a yes/no select box)
* :string (a text field) - default for :string column types
* :numeric (a text field, like string) - default for :integer, :float and :decimal column types
* :file (a file field)

The documentation is pretty good for each of these (what it does, what the output is, etc) so go check it out.


h3. One day...

* calendars and other more humanized date/time selections
* flash-based multi-file selection
* an interface for tagging and other has_many_through style associations

In the meantime, there's nothing stopping you from mixing some old fashioned HTML and ERB for custom widgets in with the Formtastic DLS stuff in your views, and I'd love to hear what others are finding a need for.

h3. Fields without database columns

Formtastic is pretty tightly coupled to ActiveRecord database columns, but it will at least _attempt_ to play nicely with your models other methods (like a virtual column 'full_name' which is split into first_name and last_name in a before save callback), and I'd like this to continue and improve.


h2. Configuration

If you wish, put something like this in config/initializers/formtastic_config.rb:

<pre>
  JustinFrench::Formtastic::SemanticFormBuilder.all_fields_required_by_default = false
  JustinFrench::Formtastic::SemanticFormBuilder.required_string = "(required)"
  JustinFrench::Formtastic::SemanticFormBuilder.optional_string = "(optional)"

  # Set the way inline errors will be displayed. Valid options are :sentence, :list and :none
  JustinFrench::Formtastic::SemanticFormBuilder.inline_errors = :sentence
</pre>



h2. Status

*THIS IS DEFINITELY NOT PRODUCTION-READY.  THINGS ARE GOING TO CHANGE A BIT.*

It's incredibly opinionated, incomplete, a work in progress, messy around the edges, messy in the middle too, tightly coupled to the database, tightly coupled to "my way" of doing things and has an incomplete (but fast-growing) test suite, but I hope you try it and offer some suggestions and improvements any way.


h2. Roadmap to 1.0

* there's a few of TODOs left in the code
* improve the generated sample stylesheets
* take a look at a DSL for the validation errors heading and messages typically placed at the top of a form
* maybe get rid of the JustinFrench:: module namespace

h2. Usage

The smallest example:

<pre>
  <% semantic_form_for @post do |form| %>
    <% form.inputs do %>
      <%= form.input :title %>
      <%= form.input :body %>
      <%= form.input :section_id, :as => :radio %>
    <% end %>
    <% form.buttons do %>
      <%= form.commit_button %>
    <% end %>
  <% end %>
</pre>

Yes, it'll even handle belongs_to associations, rendering a radio list or select box with the right set of choices!  The output is something like:

<pre>
  <form action="/posts" class="formtastic new_post" id="new_post" method="post">
    <fieldset class="inputs">
      <ol>
        <li class="string required" id="post_title_input">
          <label for="post_title">Title<abbr title="required">*</abbr></label>
          <input id="post_title" maxlength="255" name="post[title]" size="50" type="text" />
        </li>
        <li class="text optional" id="post_body_input">
          <label for="post_body">Body</label>
          <textarea cols="40" id="post_body" name="post[body]" rows="20"></textarea>
        </li>
        <li class="radio required" id="post_author_id_input">
          <fieldset>
            <legend><span>Author<abbr title="required">*</abbr></span></legend>
            <ol>
              <li>
                <label for="post_author_id_37">
                  <input id="post_author_id_37" name="post[author_id]" type="radio" value="37" />
                  Fred Smith
                </label>
              </li>
              <li>
                <label for="post_author_id_42">
                  <input id="post_author_id_42" name="post[author_id]" type="radio" value="42" />
                  Bob Rock
                </label>
              </li>
            </ol>
          </fieldset>
        </li>
      </ol>
    </fieldset>
    <fieldset class="buttons">
      <ol>
        <li class="commit">
          <input name="commit" type="submit" value="Create Post" />
        </li>
      </ol>
    </fieldset>
  </form></pre>

If you're happy to accept the default input types and labels, there's a shorthand version too:

<pre>
  <% semantic_form_for @user do |form| %>
    <%= form.inputs :title, :body, :section_id, :created_at %>
    <%= form.buttons :commit %>
  <% end %>
</pre>

You don't even have to specify the field list (Formtastic will simply render and input for each column in the database table) or button list (usually you only need one commit button to create/save):

<pre>
  <% semantic_form_for @user do |form| %>
    <%= form.inputs %>
    <%= form.buttons %>
  <% end %>
</pre>

Pretty soon we won't have to write any code at all ;)

h2. Extending Formtastic

Adding functionality to Formtastic can be done by extending SemanticFormBuilder and configuring formtastic's builder.

To create a new form method that displayed a star rating define the new Formtastic form builder by subclassing SemanticFormBuilder:

<pre>
# RAILS_ROOT/lib/rating_semantic_form_builder.rb
class RatingSemanticFormBuilder < JustinFrench::Formtastic::SemanticFormBuilder
  # new method to be added allowing full control over the label and value
  def rating(stars, options = {})
    options[:label] ||= 'rating'
    content = input_label(options[:label], options)
    content += @template.content_tag(:span, '*' * stars.to_i, :id => "#{@object_name}_#{options[:label]}")
    @template.content_tag(:li, content)
  end
end
</pre>

Set Formtastic's builder to your newly defined RatingSemanticFormBuilder
<pre>
# RAILS_ROOT/config/initializers/override_formtastic_builder.rb

require 'rating_semantic_form_builder.rb'

# set the formtastic builder to a customized version of the formtastic builder
JustinFrench::Formtastic::SemanticFormHelper.builder = RatingSemanticFormBuilder
</pre>

Use your newly created formtastic method
<pre>
  <% semantic_form_for Project.new do |form| %>
    <% form.input_field_set :name => "ratings" do %>
      <%= form.rating 5 %>
      <%= form.rating 11, :label => 'awesomeness (out of 10)' %>
    <% end %>
  <% end %>
</pre>

h2. Conventions & Prerequisites

In a few places (like radio or select widgets for belongs_to associations) Formtastic expects your ActiveRecord instances to respond to the <code>to_label</code> or <code>to_s</code> method (returning a String).  You can easily add this to your models: For example, a User object might want to return the user's first name, last name and login:

<pre>
class User < ActiveRecord::Base
  #...
  def to_label
    "#{first_name} #{last_name} (#{login})"
  end
end
</pre>


h2. Dependencies

There are none, but...

* if you have the "ValidationReflection":http://github.com/redinger/validation_reflection plugin is installed, you won't have to specify the :required option (it checks the validations on the model instead)
* rspec, rspec_hpricot_matchers and rcov gems (plus any of their own dependencies) are required for the test suite


h2. What about Stylesheets?

A proof-of-concept (very much a work-in-progress) stylesheet is provided which you can include in your layout.  Customisation is best achieved by overriding these styles in an additional stylesheet so that the formtastic styles can be updated without clobbering your changes.

1. Use the generator to copy the formtastic.css and formtastic_changes.css into your public directory

<pre>
./script/generate formtastic_stylesheets
</pre>

2. Add both formtastic.css and formtastic_changes.css to your layout:

<pre>
<%= stylesheet_link_tag "formtastic" %>
<%= stylesheet_link_tag "formtastic_changes" %>
</pre>



h2. Compatibility

I'm only testing Formtastic with the latest Rails 2.2.x stable release.


h2. But it doesn't do that thing I really need!

Oh noes!  It might not ever do it either.  We'll see.  This is not a silver bullet.  I want to make the usual stuff easy, and the unusual stuff possible.  That might mean that some of the inputs on your form still have to be hard-coded, but some is better than all, right?

I really hope the plugin will soon be clean and extensible enough to invite others to contribute more complex input types (calendars, etc) to the core.



h2. Contributors

* "Justin French":http://justinfrench.com
* "Xavier Shay":http://rhnh.net
* "Bin Dong":http://github.com/dongbin
* "Ben Hamill":http://blog.benhamill.com/
* "Pat Allan":http://github.com/freelancing-god
* "negonicrac":http://github.com/negonicrac
* "Andy Pearson":http://github.com/andypearson
* "Mark Mansour":http://stateofflux.com
* "Tien Dung":http://github.com/tiendung


h2. Project Info

Formtastic is hosted on Github: http://github.com/justinfrench/formtastic/, where your contributions, forkings, comments and feedback are greatly welcomed.


Copyright (c) 2007-2008 Justin French, released under the MIT license.
